
from telebot import types
from function_and_data import *  # –î–∞, —è –∑–Ω–∞—é —á—Ç–æ —Ç–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–∏



@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data='sign_in'))
    send_message(chat_id, 'üîê <b>–í–æ–π—Ç–∏</b> –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è <u>—Å—Ç–∞—Ä—Ç–∞</u>.', reply_markup=markup, parse_mode='html')


@bot.message_handler(commands=['main_menu'])
def main_message(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if not is_sign_in(chat_id):
        start_message(message)
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ', callback_data='car_reg'))
        send_message(chat_id, 'main menu message.', reply_markup=markup)


@bot.message_handler(commands=['sign_out'])
def out_message(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if is_sign_in(chat_id):
        del_user_log(chat_id)
        send_message(chat_id, "üö™ <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n", parse_mode='html')


# –î–æ–±–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
@bot.message_handler(commands=['clear'])
def clear_all_message(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    del_message(chat_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    chat_id = callback.message.chat.id
    call_funk = callback.data
    message = callback.message

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    match call_funk:
        case 'sign_in':
            sign_in(message)
        case 'car_reg':
            car_registration(message)
        case 'exit_reg':
            exit_registration(message)
        case 'add_device':
            add_device(message)
        case 'add_name':
            add_name(message)
        case 'add_gosnum':
            add_gosnum(message)
        case 'add_brand':
            add_brand(message)
        case 'add_wheels':
            add_wheels(message)
        case 'add_brandWs':
            add_brandWs(message)
        case 'end_reg':
            end_registration(message)


def get_passwd(message, login):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    passwd = message.text
    if is_acreditation(login, passwd):
        send_message(chat_id, "‚úÖ <b>–í—Ö–æ–¥</b> –≤ —Å–∏—Å—Ç–µ–º—É <u>–≤—ã–ø–æ–ª–Ω–µ–Ω.</u>\n", parse_mode='html')
        add_user_log(chat_id, login)
        main_message(message)
    elif passwd == '/start':  # for break from menu, do you think that we should add InlineKeyboardButton?
        start_message(message)
    elif passwd == '/sign_out':
        out_message(message)
    else:
        send_message(chat_id, "üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π</b> <u>–ø–∞—Ä–æ–ª—å.</u> \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n", parse_mode='html')
        bot.register_next_step_handler(message, get_passwd, login=login)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_login(message):
    chat_id = message.chat.id
    login = message.text

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if is_registered(login):
        send_message(chat_id, "üîë <b>–õ–æ–≥–∏–Ω</b> –µ—Å—Ç—å <u>–≤ —Å–∏—Å—Ç–µ–º–µ.</u> \n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n", parse_mode='html')
        bot.register_next_step_handler(message, get_passwd, login=login)
    elif login == '/start':  # for break from menu, do you think that we should add InlineKeyboardButton?
        start_message(message)
    else:
        send_message(chat_id, "üö´ <b>–õ–æ–≥–∏–Ω</b> <u>–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</u> –≤ —Å–∏—Å—Ç–µ–º–µ. \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n",
                     parse_mode='html')
        bot.register_next_step_handler(message, get_login)


def sign_in(message):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if not is_sign_in(chat_id):
        send_message(chat_id, "üíº <b>–í–≤–µ–¥–∏—Ç–µ</b> –ª–æ–≥–∏–Ω –∫–æ–º–ø–∞–Ω–∏–∏.", parse_mode='html')
        bot.register_next_step_handler(message, get_login)
    else:
        main_message(message)


def car_registration(message, **kwags):
    chat_id = message.chat.id

    add_car_reg_log(chat_id, **kwags)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üö´', callback_data='exit_reg'))
    send_message(chat_id, '‚ùó   ‚ùó   –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.  ‚ùó  ‚ùó', reply_markup=markup)
    
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('‚öôÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', callback_data='add_device')
    btn2 = types.InlineKeyboardButton('üè¢ –ö–æ–º–ø–∞–Ω–∏—è', callback_data='add_name')
    markup.row(btn1, btn2)
    btn3 = types.InlineKeyboardButton('üöò –ì–æ—Å. –Ω–æ–º–µ—Ä', callback_data='add_gosnum')
    btn4 = types.InlineKeyboardButton('üöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', callback_data='add_brand')
    markup.row(btn3, btn4)
    btn5 = types.InlineKeyboardButton('üõû –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–µ—Å', callback_data='add_wheels')
    btn6 = types.InlineKeyboardButton('üîÑ –ú–∞—Ä–∫–∞ —à–∏–Ω', callback_data='add_brandWs')
    markup.row(btn5, btn6)
    markup.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚úÖ', callback_data='end_reg'))

    send_message(chat_id, form_text(chat_id, kwags), parse_mode='html', reply_markup=markup)


def exit_registration(message):
    chat_id = message.chat.id
    del_car_reg_log(chat_id)
    send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üö´.')
    main_message(message)

def end_registration(message):
    chat_id = message.chat.id

    chat_id = str(chat_id)

    if chat_id in get_car_reg_log(chat_id):
        if 'gosnum' in get_car_reg_log(chat_id)[str(chat_id)].keys():
            save_car_reg_log(chat_id)
            send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ.')
            main_message(message)
        else:
            send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–Ω–∞ üö´.\n –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
            main_message(message)
    else:
        send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–Ω–∞ üö´.\n –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É!')
        car_registration(message)
    




#add_func
def add_device(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üÜî <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>ID</u> —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', parse_mode='html')
    bot.register_next_step_handler(message, device_property)

def add_name(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üè¢ <b>–í–≤–µ–¥–∏—Ç–µ</b> <u>–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</u>', parse_mode='html')
    bot.register_next_step_handler(message, name_property)

def add_gosnum(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üöó <b>–í–≤–µ–¥–∏—Ç–µ</b> –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π <u>–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è</u>', parse_mode='html')
    bot.register_next_step_handler(message, gosnum_property)

def add_brand(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üöò <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>–º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è</u>', parse_mode='html')
    bot.register_next_step_handler(message, brand_property)

def add_wheels(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üõû <b>–í–≤–µ–¥–∏—Ç–µ</b> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <u>–∫–æ–ª—ë—Å</u> –∞–≤—Ç–æ–º–æ–±–∏–ª—è', parse_mode='html')
    bot.register_next_step_handler(message, wheels_property)

def add_brandWs(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üîÑ <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>–º–∞—Ä–∫—É —à–∏–Ω</u>', parse_mode='html')
    bot.register_next_step_handler(message, brandWs_property)


#property
def device_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–î–µ–≤–∞–π—Å {text} –¥–æ–±–∞–≤–ª–µ–Ω')
    car_registration(message, device=text)

def name_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–ö—Ä–∞–Ω–∏—è {text} –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    car_registration(message, name=text)

def gosnum_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä {text} –¥–æ–±–∞–≤–ª–µ–Ω')
    car_registration(message, gosnum=text)


def brand_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–ú–∞—Ä–∫–∞ –∫–æ–ª–µ—Å {text} –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    car_registration(message, brand=text)


def wheels_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–ö–æ–ª-–≤–æ –∫–æ–ª–µ—Å {text} –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    car_registration(message, wheels=text)


def brandWs_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–ë—Ä–µ–Ω—Ç –∫–æ–ª–µ—Å {text} –¥–æ–±–∞–≤–ª–µ–Ω')
    car_registration(message, brandWs=text)


bot.infinity_polling()
